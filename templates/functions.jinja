{# A recursive function that displays all comments and their replies #}
{% macro render_comment(comment, comment_reactions, post, current_user, get_date, moment, x) %} {# x is how deep the comment is nested, used for indentation each indentation x is 2% larger #}
    {% if x is not defined %}
        {% set x = 0 %}
    {% endif %}
    {# Display the comment with its content, username, time, and reactions #}
    <div style="margin-left: {{x}}%;">
        <p>{{ comment.username }}: {{ comment.content }}, Posted on: {{ moment(get_date(comment.time)).format('MMMM Do YYYY, h:mm:ss a') }}
        Likes: {{ comment_reactions[comment.id]['like_count'] }} Dislikes: {{ comment_reactions[comment.id]['dislike_count'] }}</p>

        {# Like/dislike #}
        <form action="/react/{{ post.id }}//{{ comment.id }} " style="display: inline;" method="post">
            <button class="btn {% if current_user.username in comment_reactions[comment.id]['liked_by'] %} btn-dark {% endif %}" class="like" name="reaction" type="submit" value="like">Like</button>
            <button class="btn {% if current_user.username in comment_reactions[comment.id]['disliked_by'] %} btn-dark {% endif %}" class**="dislike" name="reaction" type="submit" value="dislike">Dislike</button>
        </form>

        {# Add a reply #}
        <form method="post" action="/view/post/{{ post.id }}/{{ comment.id }}" style="display: inline;"> 
            <input type="text" name="comment" style="display: inline-block;" placeholder="Reply to this comment">
            <button type="submit" style="display: inline-block;">Reply</button>
        </form>

        {# Button to remove a comment if and only if you are the owner or you are the owner of a post this comment was made on #}
        {% if current_user.username == post.username or current_user.username == comment.username %}
        <form method="post" action="/remove/{{ post.id }}/{{ comment.id }}">
            <button type="submit">Remove</button>
        </form>
        {% endif %}
    </div>
    
    {# Recursively render replies to this comment if they exist#}
        {% for reply in get_replies(comment.id) %}
            {{ render_comment(reply, comment_reactions, post, current_user, get_date, moment, x + 2) }}
        {% endfor %}

{% endmacro %}

{# Main template for displaying posts in a grid format #}
{% macro display_post(posts, current_user, post_reactions, get_date, moment) %}
    {% for post in posts %} {# Display posts -> they are arranged in grid of 3 per column #}
            <div class = "card flex_container">
                <section>
                    {% for image_index in range(post.image_count) %}
                    {# each image gets it's own id based on their parent post and their id in that specific post#}
                        <section id="image{{image_index}}_{{ post.id }}" class="img_posts" style="background-image:url({{ url_for('get_image', filename = image_index ~ 'postimage_' ~ post.id ~ '.jpg') }});" {% if loop.first %} visible {% else %} hidden {% endif %}>
                        {% if not loop.first %} {# _image_index+1_ and -1 are index to which image has to become visible when this button is pressed that's why images also have ids with their index #}
                            <button onclick="switchImage({{ image_index }}, {{ image_index - 1 }}, {{ post.id }})" class="btn btn-success" style="display: inline; margin-right:auto;"><-</button>
                        {% endif %} 
                        {% if not loop.last %}
                            <button onclick="switchImage({{ image_index }}, {{ image_index + 1 }}, {{ post.id }})" class="btn btn-success" style="display: inline; margin-left:auto;">-></button>
                        {% endif %}
                        </section>
                    {% endfor %}
                    <a href="/view/{{ post.id }}" class="btn a_tag"> {# if this a tag is clicked you get to the full post page #}
                        <section class="card-body" style="height: 20vh; overflow-y: auto;"> {# Too long posts will be made scrollable #}
                            <h3 class="card-title post_title">{{ post.title }}</h3>
                            <p class="card-text">{{ post.post_content }}</p>
                        </section>
                        <section> 
                            {# For time I use flask-moment and a python function get_date() from helpers #}
                            <p class="card-footer post_author center">{{ post.username }}</p>
                            <p class="card-footer center">Posted on: {{ moment(get_date(post.time)).format('MMMM Do YYYY, h:mm:ss a') }} Likes: {{ post_reactions[post.id]['like_count'] }} Dislikes: {{ post_reactions[post.id]['dislike_count'] }}, {{ post.is_image }}</p> {# Post_reactions is a dict of all reactions to all posts  #}
                        </section>
                    </a>
                    <section class="center">
                        {% if current_user.username == post.username %}
                        <form method="post" action="/remove/{{ post.id }}">
                            <button type="submit">Remove</button>
                        </form>
                        {% endif %}
                        <form action="/react/{{ post.id }}" method="post"> {# Form to like/dislike selected button is in color black other one is white #}
                            <button class="btn {% if current_user.username in post_reactions[post.id]['liked_by'] %} btn-dark {% endif %}" class="like" name="reaction" type="submit" value="like">Like</button>
                            <button class="btn {% if current_user.username in post_reactions[post.id]['disliked_by'] %} btn-dark {% endif %}" class="dislike" name="reaction" type="submit" value="dislike">Dislike</button>
                        </form>
                    </section>
                </section>
            </div>
    {% endfor %}
{% endmacro %}
