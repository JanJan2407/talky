{# A recursive function that displays all comments and their replies #}
{% macro render_comment(comment, comment_reactions, post, current_user, get_date, moment, x) %} {# x is how deep the comment is nested, used for indentation each indentation x is 2% larger #}
    {% if x is not defined %}
        {% set x = 0 %}
    {% endif %}
    {# Display the comment with its content, username, time, and reactions #}
    <div style="margin-left: {{ x }}%;" id="comment_{{ comment.id }}">
        {# Owner, time of post, reactions #}
        <p>{{ comment.username }}, Posted on: {{ moment(get_date(comment.time)).format('MMMM Do YYYY, h:mm:ss a') }}
        Likes: <span id="likes{{ comment.id }}">{{ comment_reactions[comment.id]['like_count'] }}</span> Dislikes: <span id="dislikes{{ comment.id }}">{{ comment_reactions[comment.id]['dislike_count'] }}</span></p>
        {% if comment.edit_time != 0 %}
        <p>Edited on: {{ moment(get_date(comment.edit_time)).format('MMMM Do YYYY, h:mm:ss a') }}</p>
        {% endif %}

        {# Content #}
        <div class="preserve">{{ load(comment.content) }}</div>

        {# Like/dislike #}
        <button class="btn {% if current_user.username in comment_reactions[comment.id]['liked_by'] %} btn-dark {% endif %}" id="like_{{ comment.id }}" name="reaction" value="like" onclick="react('like', '{{ current_user.username }}', {{ post.id }}, {{ comment.id }})">Like</button>
        <button class="btn {% if current_user.username in comment_reactions[comment.id]['disliked_by'] %} btn-dark {% endif %}" id="dislike_{{ comment.id }}" name="reaction" value="dislike" onclick="react('dislike', '{{ current_user.username }}', {{ post.id }}, {{ comment.id }})">Dislike</button>

        {# Add a reply #}
        <textarea name="comment" style="display: inline-block;" placeholder="Add a reply" id="commentContent_{{ comment.id }}"></textarea>
        <button onclick="addComment({{ post.id }}, {{ comment.id }}, {{ x + 2 }})" style="display: inline-block;" id="add_{{ comment.id }}">Add</button>

        {# Button to edit only if you are the owner of the comment #}
        {% if current_user.username == comment.username %}
        <form method="get" action="/edit_comment/{{ post.id }}/{{ comment.id }}">
            <button type="submit">Edit</button>
        </form>
        {% endif %}

        {# Button to remove a comment if and only if you are the owner or you are the owner of a post this comment was made on #}
        {% if current_user.username == post.username or current_user.username == comment.username %}
        <form method="post" action="/remove/{{ post.id }}/{{ comment.id }}">
            <button type="submit">Remove</button>
        </form>
        {% endif %}
    </div>
    <div id="placeholder_{{ comment.id }}"></div>

    {# Recursively render replies to this comment if they exist #}
        {% for reply in get_replies(comment.id) %}
            {{ render_comment(reply, comment_reactions, post, current_user, get_date, moment, x + 2) }}
        {% endfor %}

{% endmacro %}

{# Main template for displaying posts in a grid format #}
{% macro display_post(posts, current_user, post_reactions, get_date, moment) %}
    {% for post in posts %} {# Display posts -> they are arranged in grid of 3 per column #}
            <div class = "card flex_container">
                <section style="width: 100%;"> <!-- Images -->
                    {{ display_images(post) }}
                </section>
                <section> <!-- Title, text, info -->
                <a href="/view/{{ post.id }}" class="btn a_tag"> {# If this a tag is clicked you get to the full post page #}
                    <section class="card-body" style="height: 20vh; overflow-y: auto;"> {# Too long posts will be made scrollable #}
                        <h3 class="card-title post_title">{{ post.title }}</h3>
                        <div class="card-text preserve" style="text-align: left;">{{ load(post.post_content) }}</div>{# Class preserve allows posts to be rendered exactly as they were entered with all paragraphs and new lines#}
                    </section>
                    <section> 
                        {# For time I use flask-moment and a python function get_date() from helpers #}
                        <p class="card-footer post_author center">{{ post.username }}</p>
                        <p class="card-footer center">Likes: <span id="likes{{ post.id }}">{{ post_reactions[post.id]['like_count'] }}</span> Dislikes: <span id="dislikes{{ post.id }}">{{ post_reactions[post.id]['dislike_count'] }}</span>
                        {% if post.edit_time != 0%}  {# If post was ever edited #}
                            Edited on: {{ moment(get_date(post.edit_time)).format('MMMM Do YYYY, h:mm:ss a') }}
                        {% else %}
                            Posted on: {{ moment(get_date(post.time)).format('MMMM Do YYYY, h:mm:ss a') }} 
                        {% endif %}
                        </p> {# Post_reactions is a dict of all reactions to all posts  #}
                    </section>
                </a>
                </section>

                <section class="center"> <!-- React, remove, edit -->
                    {% if current_user.username == post.username %} {# You can edit and or remove only if you were the poster #}
                    <form method="get" action="/edit_post/{{ post.id }}" style="display:inline-block;">
                        <button type="submit" class="btn" style="display:inline-block;">Edit</button>
                    </form>
                    <form method="post" action="/remove/{{ post.id }}" style="display:inline-block;">
                        <button type="submit" class="btn" style="display: inline-block;">Remove</button>
                    </form>
                    {% endif %}
                    {# Buttons to react to posts#}
                    <button class="btn {% if current_user.username in post_reactions[post.id]['liked_by'] %} btn-dark {% endif %}" id="like_{{ post.id }}" name="reaction" onclick="react('like', '{{ current_user.username }}', {{ post.id }})" value="like">Like</button>
                    <button class="btn {% if current_user.username in post_reactions[post.id]['disliked_by'] %} btn-dark {% endif %}" id="dislike_{{ post.id }}" name="reaction" onclick="react('dislike', '{{ current_user.username }}', {{ post.id }})" value="dislike">Dislike</button>
                </section>
            </div>
    {% endfor %}
{% endmacro %}

{% macro display_images(post) %}
    {% set current_images = validate(post.id, post.image_count) %}
    {% for image_index in current_images %}
    {# each image gets it's own id based on their parent post and their id in that specific post#}
        {% set fileUrl = url_for('get_image', filename = post.id ~ 'postimage_' ~ image_index ~ '.jpg') %}
            <section id="image{{ post.id }}_{{ image_index }}" class="img_posts" style="background-image:url({{ fileUrl }});" {% if loop.first %} visible {% else %} hidden {% endif %}>
            {% if not loop.first %} {# _image_index+1_ and -1 are index to which image has to become visible when this button is pressed that's why images also have ids with their index #}
                <button type="button" onclick="switchImage({{ image_index }}, {{ image_index - 1 }}, {{ post.id }})" class="btn btn-success" style="display: inline; margin-right:auto;"><-</button>
            {% endif %} 
            {% if not loop.last %}
                <button type="button" onclick="switchImage({{ image_index }}, {{ image_index + 1 }}, {{ post.id }})" class="btn btn-success" style="display: inline; margin-left:auto;">-></button>
            {% endif %}
            </section>
    {% endfor %}
{% endmacro %}